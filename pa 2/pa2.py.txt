"""
Clone of 2048 game.
"""

import poc_2048_gui
import random

NEW_TILE = [2] * 9 + [4] # 90 % 2's and 10% 4

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    newline = []
    count = 0
    merged = False
    
    for cell in line:
        if cell == 0:
            count += 1
        else:
            if len(newline) > 0:
                if cell == newline[-1] and not merged:
                    newline.pop()
                    newline.append(2*cell)
                    count += 1
                    merged = True
                    continue
            newline.append(cell)
            merged = False
    
    
    newline = newline + [0] * count
    
    return newline

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        self._grid_height = grid_height
        self._grid_width = grid_width
        self.reset()
        self._initial_tiles = { UP : [(0,x) for x in range(self._grid_width)],
                              DOWN : [(self._grid_height-1,x) for x in range(self._grid_width)],
                              LEFT : [(x,0) for x in range(self._grid_height)],
                              RIGHT : [(x,self._grid_width-1) for x in range(self._grid_height)]}
        
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._grid = [[0 for dummy_col in range(self._grid_width)] 
                for dummy_row in range(self._grid_height)]
        self.new_tile()
        self.new_tile()

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        
        return_str = ''
        for row in range(self._grid_height):
            for col in range(self._grid_width):
                return_str += str(self.get_tile(row,col))
            return_str += '\n'
               
        return return_str 

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        
        return self._grid_height
    
    def get_grid_width(self):
        """
        Get the width of the board.
        """
        
        return self._grid_width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        initial_tile_list = self._initial_tiles[direction]
        step = OFFSETS[direction]
        old_set = self.__str__()
        for tile in initial_tile_list:
            idx_to_merge = []
            if direction == UP or direction == DOWN:
                max_value = self._grid_height
            else: 
                max_value = self._grid_width
            idx_to_merge = [(tile[0] + i*step[0], tile[1] + i*step[1])
                              for i in range(max_value)]
            values_to_merge = []
            for idx in idx_to_merge:
                values_to_merge += [self.get_tile(idx[0],idx[1])]
            new_values = merge(values_to_merge)
            for index in range(0,len(idx_to_merge)):
                self.set_tile(idx_to_merge[index][0],idx_to_merge[index][1],new_values[index])
        if self.__str__() != old_set:
            self.new_tile()

    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        while True:
            row = random.randrange(self._grid_height)
            col = random.randrange(self._grid_width)
            if self.get_tile(row,col) == 0:
                break
        self.set_tile(row,col,random.choice(NEW_TILE))

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self._grid[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        
        return self._grid[row][col]


poc_2048_gui.run_gui(TwentyFortyEight(4, 5))
